%macro missvars(libref=work,data=,outlib=,specmisc=,specmisn=,allvars=0,
 debug=0);
/*soh===========================================================================
  Eli Lilly and Company
   PROGRAM NAME    : missvars.sas            Temporary Object Prefix: _mv
   PROGRAMMER      : Greg Steffens
   DESCRIPTION     : Reports what variables are always missing in an input data
                      set or an input library of data sets.  Optionally creates
                      copies of the input data set(s) in the output library
                      after dropping variables that are always missing.
   LANGUAGE/VERSION: SAS/Version 8
   INITIATION DATE : 
   VALIDATOR       :
   INPUT FILE(S)   : none
   OUTPUT FILE(S)  : none
   XTRNL PROG CALLS: %ut_logical
--------------------------------------------------------------------------------
  Parameters:
   Name     Type     Default  Description
   -------- -------- -------- --------------------------------------------------
   LIBREF   required work     libref of input library of data sets
   DATA     optional null     name of data set in LIBREF to check for
                               missing value variables
   OUTLIB   optional null     if specified output data sets will be created
                               using this libref - the names of the data
                               sets will be the same as those of the input
                               data sets but the output data set will not
                               include variables which always contain missing
                               values
   SPECMISC optional see note Special missing value codes for character
                               variables.  The list must conform to the IN
                               operator requirements.  
   SPECMISN optional see note Special missing value codes for numeric variables.
                               The list must conform to the IN operator
                               requirements.
   ALLVARS  required 0        %ut_logical value specifying whether to include
                               variables that have non-missing values in the
                               list of variables.  If false only variables
                               that are always missing are included in the list
                               of variables generated by the macro.
   DEBUG    required 0        turns debug mode on/off with %ut_logical value


  Usage Notes:

  A list of variables is sent to the log and prin files with an indication of
  whether they have only missing values.  If ALLVARS is true all variables are
  in the list.  If ALLVARS is false then only variables with all missing values
  are in the list.

  The usual special missing values of .A - .Z as well as . will be used
  for numeric variables.  For character variables ' ', '.a' and '.A' will be
  considered missing by default.  The SPECMISN and SPECMISC parameters are
  used when additional values are to be considered missing, for example when
  numeric values of 9 are meant to mean missing.

	Typical call:

            libref in 'path';
            %missvars(libref=in);

  Future enhancement ideas:

--------------------------------------------------------------------------------
                         REVISION HISTORY
================================================================================
  REV#  Date       User ID   Description
  ----  ---------  --------  ---------------------------------------------------
  001   ddmmmyyyy
eoh===========================================================================*/
%ut_logical(allvars)    %ut_logical(debug)
%local m v totmem totvar;
%let libref = %upcase(&libref);
%let outlib = %upcase(&outlib);
%if %bquote(&libref) = %bquote(&outlib) %then
 %put input data sets will be replaced;

proc contents data =
 %if &libref ^= %then %str(&libref..);
 %if %bquote(&data) ^= %then %str(&data);
 %else %str(_all_);
 out = _mvcont noprint;
run;
proc sort data=_mvcont out=_mvcont (index=(libname memname name));
  by libname memname name;
run;

data _null_;
  if eof then call symput('totmem',compress(put(totmem,5.0)));
  set _mvcont end=eof;
  by libname memname;
  if first.memname then do;
    totmem + 1;
    call symput('lib' || compress(put(totmem,5.0)),compress(libname));
    call symput('mem' || compress(put(totmem,5.0)),compress(memname));
  end;
run;
%if &debug %then %do;
  %put totmem=&totmem;
  %do m = 1 %to &totmem;
    %put &m lib&m=&&lib&m mem&m=&&mem&m;
  %end;
%end;

%do m = 1 %to &totmem;
  data _null_;
    if eof then call symput('totvar',compress(put(_n_-1,5.0)));
    set _mvcont (where = (libname = "&&lib&m" & memname = "&&mem&m"))
     end = eof;
    call symput('var' || compress(put(_n_,5.0)),name);
    call symput('vrt' || compress(put(_n_,5.0)),
     compress(put(type,1.0)));
  run;
  %if &debug %then %do;
    %put totvar=&totvar;
    %do v = 1 %to &totvar;
      %put &v lib&v=&&lib&v mem&v=&&mem&v;
    %end;
  %end;
  data _null_;
    if eof then do;
      %do v = 1 %to &totvar;
        if _mv&v = 0 then call symput("vrm&v","0");
        else call symput("vrm&v","1");
      %end;
    end;
    set &&lib&m...&&mem&m end=eof;
    if _n_ = 1 then do;
      %do v = 1 %to &totvar;
        _mv&v = 1;
      %end;
    end;
    %do v = 1 %to &totvar;
      if &&var&v not in (
       %if &&vrt&v = 1 %then %str(. .a .b .c .d .e .f .g .h .i
       .j .k .l .m .n .o .p .q .r .s .t .u .v .w .x .y .z &specmisn);
       %else %str(' ' '.a' '.A' &specmisc);
       )
       then _mv&v = 0;
    %end;
    retain
     %do v = 1 %to &totvar;
       _mv&v
     %end;
     ;
  run;

  %do v = 1 %to &totvar;
    %if &&vrm&v %then %put &v &&var&v is always missing in &&lib&m...&&mem&m;
    %else %if &allvars %then
     %put &v &&var&v has non-missing values in &&lib&m...&&mem&m;
  %end;
  data _null_;
    file print;
    %do v = 1 %to &totvar;
      %if &&vrm&v %then %do;
        put "&v &&var&v is always missing in &&lib&m...&&mem&m";
      %end;
      %else %if &allvars %then %do;
        put "&v &&var&v has non-missing values in &&lib&m...&&mem&m";
      %end;
    %end;
    stop;
  run;

  %if %bquote(&outlib) ^= %then %do;
    data &outlib..&&mem&m;
      set &&lib&m...&&mem&m;
      keep
       %do v = 1 %to &totvar;
         %if ^ &&vrm&v %then %str(&&var&v);
       %end;
       ;
    run;
  %end;
%end;
%if ^ &debug %then %do;
  proc datasets lib=work nolist;
    delete _mv:;
  run; quit;
%end;
%mend;
